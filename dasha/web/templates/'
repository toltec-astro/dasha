#! /usr/bin/env python


"""This is a template that mimics slapdash style."""

from . import ComponentTemplate
import dash_html_components as html
import dash_core_components as dcc
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
from tollan.utils.log import get_logger
from tollan.utils.registry import Registry
from .utils import fa, resolve_url
from .sysinfo import SysInfo
from ..extensions.dasha import load_template


from dash.dependencies import Input, State, Output, ClientsideFunction


class SlapDashPageMixin(object):

    def _make_navlink(self, container):
        """This is the used as the navlist child"""
        return container.child(
                dbc.NavLink,
                children=self.title_text,
                active=False, href=resolve_url(self.route_name))


class SlapDash(ComponentTemplate):

    _component_cls = dbc.Container
    fluid = True
    className = 'px-0'
    id = 'slapdash'
    style = {
            'min-width': 320,
            }

    def __init__(self, pages, **kwargs):
        super().__init__(**kwargs)
        self._pages = pages
        self._page_registry = Registry.create()

    @property
    def title_text(self):
        return self.TITLE

    def _make_title(self, container, component_cls, **kwargs):
        return container.child(component_cls, children=[
                fa("far fa-chart-bar"),
                self.title_text
            ], **kwargs)

    def _make_footer(self, container):
        # footer = container.child(html.Footer, className='sticky-footer')
        # for elem in ['play', ]:
        #     container.child(html.Span(elem))
        container.child(SysInfo())

    def _make_page(self, spec):
        def cls_func(template_cls):
            name = 'SlapDashPageTemplate'
            if name.lower() in template_cls._template_registry:
                return template_cls._template_registry[name.lower()]

            class SlapDashPageTemplate(template_cls, SlapDashPageMixin):

                @property
                def _route_name(self):
                    """This is the stem of the page url."""
                    return getattr(
                            self, 'route_name',
                            template_cls.idbase)

                @property
                def layout(self):
                    logger = get_logger()
                    try:
                        return super(template_cls, self).layout
                    except Exception as e:
                        logger.error(
                                f"unable to load page {self.route_name}",
                                exc_info=True)
                        reason = str(e)
                        return dbc.Jumbotron([
                                html.H1(
                                    "404: Not found",
                                    className="text-danger"),
                                html.Hr(),
                                html.P(
                                    f"Failed load {self.route_name}, "
                                    f"reason: {reason}."
                                    ),
                            ])
            return SlapDashPageTemplate
        page = load_template(spec, cls_func=cls_func)
        self._page_registry.register(page.route_name, page)
        return page

    def _make_sidebar(self, container):
        sidebar = container.child(
                html.Div,
                className='navbar-dark bg-dark d-flex flex-column',
                id='sidebar')
        header = sidebar.child(dbc.Row)
        self._make_title(
                header.child(dbc.Col).child(
                    html.Header, className="brand").child(
                        dcc.Link, href=resolve_url("/"),
                        ), html.H3)
        toggles = header.child(dbc.Col, width='auto', align='center')
        self.navbar_toggle = toggles.child(
                html.Button,
                children=html.Span(className="navbar-toggler-icon"),
                className="navbar-toggler",
                style={
                    "color": "rgba(0,0,0,.5)",
                    "border-color": "rgba(0,0,0,.1)",
                    'outline': 'none',
                },
                id='navbar-toggle',
            )
        self.sidebar_toggle = toggles.child(
                html.Button,
                children=html.Span(className="navbar-toggler-icon"),
                className="navbar-toggler",
                # the navbar-toggler classes don't set color
                style={
                    "color": "rgba(0,0,0,.5)",
                    "border-color": "rgba(0,0,0,.1)",
                    'outline': 'none',
                },
                id='sidebar-toggle',
            )

        self.sidebar_collapse = sidebar.child(
                dbc.Collapse, id='nav-collapse', className='flex-grow-1')
        self.navlist = self.sidebar_collapse.child(
                dbc.Nav, vertical=True, pills=True)
        for page in self._pages:
            self._make_page(page)._make_navlink(self.navlist)
        self.clientside_state.data['navlink_default'] = '/0'
        self.location = self.child(dcc.Location, refresh=False)

        footer = sidebar.child(
                dbc.Container, fluid=True,
                className='text-light')
        footer.child(html.Hr(className='bg-light'))
        self._make_footer(footer)

    def _get_content_layout(self, route_name):
        if route_name == '/':
            route_name = next(self._page_registry.keys())
        return self._page_registry[route_name].parent.layout

    def setup_layout(self, app):
        self.clientside_state = self.child(dcc.Store, data=dict())
        self._make_sidebar(self)
        content_container = self.child(html.Div, id='page-content')

        # sidebar callbacks
        app.clientside_callback(
                ClientsideFunction(
                    namespace='ui',
                    function_name='activateNavlink',
                    ),
                Output(self.navlist.id, 'children'),
                [Input(self.location.id, 'pathname')],
                [State(self.navlist.id, 'children'),
                 State(self.clientside_state.id, 'data'),
                 ]
                )

        app.clientside_callback(
                ClientsideFunction(
                    namespace='ui',
                    function_name='collapseWithClick',
                    ),
                Output("sidebar", 'className'),
                [Input("sidebar-toggle", "n_clicks")],
                [State("sidebar", 'className')],
                )
        app.clientside_callback(
                ClientsideFunction(
                    namespace='ui',
                    function_name='toggleWithClick',
                    ),
                Output("nav-collapse", 'is_open'),
                [Input("navbar-toggle", "n_clicks")],
                [State("nav-collapse", 'is_open')],
                )

        @app.callback(
                Output(content_container.id, "children"),
                [
                    Input(self.location.id, "pathname"),
                    Input(self.location.id, "search"),
                ])
        def render_page_content(pathname, search):
            print(pathname, search)
            if pathname is None:
                raise PreventUpdate(
                    "the first Location.pathname callback shall be ignored")
            print(pathname)
            return self._get_content_layout(pathname)

        super().setup_layout(app)

    @property
    def layout(self):
        return super().layout
